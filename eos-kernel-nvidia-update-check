#!/bin/bash

# On Nvidia GPU machines, kernel and nvidia driver must update together:
# - if linux-lts is updated, nvidia-lts should be updated too
# - if linux     is updated, nvidia     should be updated too
# Note that if an nvidia*dkms driver is installed, we have nothing to check.
#
# This app checks the above and informs the calling app with exit code:
#     0=success
#     1=failure
# On failure also error messages to stderr will be displayed.

DIE() {
    echo "$progname: error: $1" >&2
    exit 1
}

Exit() {
    case "$1" in
        0) [ $verbose = yes ] && echo "==> no Nvidia driver update issue detected. " >&2 ;;
    esac
    exit "$1"
}

Main() {
    local -r progname=${0##*/}
    local verbose=no
    local color=yes

    while [ "$1" ] ; do
        case "$1" in
            -v | --verbose) verbose=yes ;;
            --no-color) color=no ;;
            -*) DIE "unsupported option '$1'." ;;
            *) break ;;
        esac
        shift
    done

    local msgs=()
    local pkgs=()

    PATH=/usr/bin:$PATH

    # Quick check is Nvidia modules are in use.
    lsmod | grep nvidia >/dev/null || Exit 0

    # If any of these nvidia dkms versions are installed, we have nothing to do.
    expac -Q %n nvidia-dkms nvidia-470xx-dkms nvidia-390xx-dkms >/dev/null && Exit 0

    # Get list of packages to be updated from parameters or otherwise.
    if [ "$1" ] ; then
        pkgs=("$@")
    else
        readarray -t pkgs <<< $(checkupdates | awk '{print $1}')
    fi

    # Find and show potential problems with Nvidia related updates.

    local NVIDIA=( nvidia nvidia-lts )
    local LINUX=(  linux  linux-lts  )
    local ix count=${#LINUX[@]}
    local ll nn

    for ((ix=0; ix < count; ix++)) ; do
        ll=${LINUX[$ix]}
        nn=${NVIDIA[$ix]}
        case "$(printf "%s\n" "${pkgs[@]}" | grep -P "^$ll$|^$nn$")" in
            "$ll")
                expac %n $nn >/dev/null && msgs+=("warning: $ll would be upgraded, $nn not!")
                ;;
            # "$nn") msgs+=("warning: $nn would be upgraded, $ll not!") ;;
        esac
    done

    if [ ${#msgs[@]} -gt 0 ] ; then
        if [ "$color" = "yes" ] ; then
            local -r RED=$'\e[0;91m'
            local -r RESET=$'\e[0m'
        else
            local -r RED=""
            local -r RESET=""
        fi
        local msg
        for msg in "${msgs[@]}" ; do
            echo "${RED}==> $progname: $msg${RESET}" >&2
        done
        exit 1
    fi
    Exit 0
}

Main "$@"
